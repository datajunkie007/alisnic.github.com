<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Andrei Lisnic</title>
 <link href="http://alisnic.github.com/atom.xml" rel="self"/>
 <link href="http://alisnic.github.com"/>
 <updated>2012-12-28T14:09:39+02:00</updated>
 <id>http://alisnic.github.com</id>
 <author>
   <name>Andrei Lisnic</name>
 </author>
 
 
 <entry>
   <title>If-less programming</title>
   <link href="http://alisnic.github.com/posts/ifless"/>
   <updated>2012-12-28T00:00:00+02:00</updated>
   <id>http://alisnic.github.com/posts/ifless</id>
   <content type="html">&lt;p&gt;I recently watched a Google tech talk called &lt;a href=&quot;http://www.youtube.com/watch?v=4F72VULWFvc&amp;amp;feature=channel&quot;&gt;&amp;ldquo;The Clean Code Talks &amp;mdash; Inheritance, Polymorphism, &amp;amp; Testing&amp;rdquo;&lt;/a&gt;, and I was amazed how &lt;strong&gt;Misko Hevery&lt;/strong&gt; explained that ifs are a smelly thing in a Object Oriented language.&lt;/p&gt;

&lt;p&gt;Being fascinated by the idea, I decided to &lt;a href=&quot;https://www.google.com/search?q=programming+without+ifs&quot;&gt;google&lt;/a&gt; it, and I was surprised that if-less programming is a pretty popular topic. I noticed &lt;a href=&quot;http://stackoverflow.com/questions/1937362/can-you-write-any-algorithm-without-an-if-statement&quot;&gt;a response to a stackoverflow&lt;/a&gt; question which stated:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;An “if” statement is an abomination in an Object Oriented language.
Why? Well, an OO language is composed of classes, objects and methods, and an “if” statement is inescapably none of those. You can’t write “if” in an OO way. It shouldn&amp;rsquo;t exist. Conditional execution, like everything else, should be a method. A method of what? Boolean.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Any Smalltalk-er knows about this thing, because there are no if statements in Smalltalk. In this language, the Boolean class has &lt;code&gt;ifTrue&lt;/code&gt; and &lt;code&gt;ifFalse&lt;/code&gt; methods, which accept blocks which will be executed depending on the value of the boolean expression. This feels at least, a bit weird and unclear to me, so I decided to investigate.&lt;/p&gt;

&lt;h1&gt;The Reasons&lt;/h1&gt;

&lt;p&gt;It is obvious that we can&amp;rsquo;t avoid conditionals, especially when comparing primitive data types. But most of the time it is not considered a good practice to use ifs in a Object-Oriented language. So what is really wrong with conditionals in a Object Oriented language?&lt;/p&gt;

&lt;h2&gt;Polymorphism&lt;/h2&gt;

&lt;p&gt;The main and most strong idea which I got from if-less programming is simple: If you use a lot of if statements, you&amp;rsquo;re doing polymorphism wrong. Here is a simple (and dumb) example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Printer
  def print (file)
    case file.type
    when :docx
      print_office_word(file)
    when :pdf
      print_pdf(file)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here that I used a &lt;code&gt;switch&lt;/code&gt; statement, it&amp;rsquo;s basically the same as using ifs. But let&amp;rsquo;s concentrate on the example. Why this class is bad? Well, for several reasons.&lt;/p&gt;

&lt;h3&gt;Ctrl-C, Ctrl-V&lt;/h3&gt;

&lt;p&gt;If the behaviour in the described object is complex enough, this switch will pop up all over the place. Image you will add a new method to the &lt;code&gt;Printer&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def get_meta_info (file)
  # gotta do that switch here
  # good thing I have the clipboard
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides the same &lt;code&gt;switch&lt;/code&gt;, you will have to add methods to process each file type which your &lt;code&gt;Printer&lt;/code&gt; knows about.&lt;/p&gt;

&lt;h3&gt;Extensibility&lt;/h3&gt;

&lt;p&gt;It is very hard to extend code which has a lot of branches, because chances are that the difference in behaviour between these branches is pretty big.&lt;/p&gt;

&lt;h3&gt;The right way&lt;/h3&gt;

&lt;p&gt;To avoid unnecessary conditions and headaches, our &lt;code&gt;Printer&lt;/code&gt; class should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Printer
  def print(file); end
  def get_meta_info(file); end
end

class PdfPrinter &amp;lt; Printer
  def print (file)
    #
  end

  def get_meta_info (file)
    #
  end
end

class MSWordPrinter &amp;lt; Printer
  def print (file)
    #
  end

  def get_meta_info (file)
    #
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Language features&lt;/h2&gt;

&lt;p&gt;In a lot of cases, avoiding conditions is easy, because there are language constructs which can do the same thing. Most of the time these constructs are present for a important reason &amp;ndash; it&amp;rsquo;s a better way to do things. Let&amp;rsquo;s look at several of them. I used Ruby in the examples, but this applicable to any good OO language.&lt;/p&gt;

&lt;h3&gt;Filter data&lt;/h3&gt;

&lt;p&gt;Any decent OO languages has means to easily filter data, you don&amp;rsquo;t need ifs to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# I slept during functional classes
collection.each {|item| result &amp;lt;&amp;lt; item if item.condition? }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A very stupid example, but it should make the point. What we should have used is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result = collection.select(&amp;amp;:condition?)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Processing errors&lt;/h3&gt;

&lt;p&gt;If you got a method which can fail, you might be tempted to do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result = do_something()
if result == nil
  #something is wrong
else
  #process
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is better that you method raises errors in case something goes wrong. It improves readability, adds meaning, and describes what the system actually does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;begin
  result = do_something()
rescue FileSystemError
  #disk is full
rescue NetworkError
  #no internet connection
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Default values&lt;/h3&gt;

&lt;p&gt;You want to keep a default value for a variable unless it is assigned, you might want to do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def method (object)
  if object.property
    param = object.property
  else
    param = default_param
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You did repeat yourself, wrote 3 lines, what you should have written is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def method (object)
  param = object.property || default_param
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;One of things which can suggest that things got to fishy in your implementation, is how hard is to test your objects. Classes with a lot of conditions require a lot of test cases and a lot of setup code. If your behaviour were properly isolated and subclassed, then your test would be very simple and with minimum setup code.&lt;/p&gt;

&lt;p&gt;By having small, specific objects, each time you have to test a class, you are testing an aspect of you system, not a behaviour.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The idea of if-less programming is very interesting and provokes to thought. As any other good idea, it should be not taken to extremes. Any language construct must be used when it is the more reasonable thing to do. I like the fact that the presence of if-s can indicate a bad OO design.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On logic in a Rails app</title>
   <link href="http://alisnic.github.com/posts/rails-logic"/>
   <updated>2012-12-24T00:00:00+02:00</updated>
   <id>http://alisnic.github.com/posts/rails-logic</id>
   <content type="html">&lt;p&gt;Recently, Grant Ammons wrote &lt;a href=&quot;http://gammons.github.com/architecture/2012/12/22/where-the-logic-hides/&quot;&gt;a nice article&lt;/a&gt; about where logic should lie in a Rails app. I would like to complement his opinion, and probably add some real life arguments to it.&lt;/p&gt;

&lt;p&gt;Grant extracted logic from the controller, and put it in a separate object, which I also do most of the time. However, a user named DHH (which probably is DHH) said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So all you&amp;rsquo;ve done here is extract the work of the controller action into a separate object. This adds needless indirection, makes the code base harder to follow, and is completely unnecessary.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I strongly disagree, and I have good reasons for it.&lt;/p&gt;

&lt;p&gt;You know what makes the code base hard to follow? Fat controllers with logic in them. I worked on a Rails app with Controllers of 800 lines of code, &lt;strong&gt;it. is. a. freaking. nightmare.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;My approach&lt;/h1&gt;

&lt;p&gt;I look at Rails as web presentation layer, it makes my app work in the browser. This has some consequences to my codebase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data-only models (no logic should be in models)&lt;/li&gt;
&lt;li&gt;logicless controllers (no logic should be there either)&lt;/li&gt;
&lt;li&gt;anything else is in single-responsibility objects in &lt;code&gt;app/domain/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You might think that this is a refactor pattern, and you are right. And you might say that this unnecessary to do from the start, and you may also be right. But the cost of creating a file and moving behaviour there is exactly 0, but the benefits are there from day 1.&lt;/p&gt;

&lt;h1&gt;Why I do it&lt;/h1&gt;

&lt;h2&gt;Fast tests&lt;/h2&gt;

&lt;p&gt;The least I am coupled to Rails, the fastest my tests are. Currently, on a medium Rails project my tests run 2-3 seconds, where 90% of the time is wasted to boot rails and test models.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t test my controllers, because they have no logic in them. My methods in controllers don&amp;rsquo;t have more than 4-5 lines of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class RatingsController &amp;lt; ApplicationController

  def create
    success = RatesBusiness.add_rating(params[:business_id],
                                       params[:score],
                                       current_user)
    render json: {success: success}
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;RatesBusiness&lt;/code&gt; has some foursquare-related logic besides just creating a entry in the database. Using this approach, I have a &lt;em&gt;very&lt;/em&gt; fast TDD flow, because most of the time I don&amp;rsquo;t need Rails to test my logic. (any dependency to models is stubbed, as any other external dependency).&lt;/p&gt;

&lt;p&gt;Your controller only connects your logic to the web interface.&lt;/p&gt;

&lt;h2&gt;Code and forget&lt;/h2&gt;

&lt;p&gt;If you have a well tested functionality that works, you don&amp;rsquo;t need see it in front of you when you code in your application. This is where single-responsibility objects kick in, I TDD them one time, I know about their existence and what their interface is, I will not ever see their code again.&lt;/p&gt;

&lt;h2&gt;Framework agnostic&lt;/h2&gt;

&lt;p&gt;When your app logic is not coupled with Rails, you do not depend on it, its version, or interface. Isolating some functionality to a service is a matter of moving some files around.&lt;/p&gt;

&lt;h2&gt;Reduced stress and debug times&lt;/h2&gt;

&lt;p&gt;Most of my classes fit in one screen, and have descriptive names as &lt;code&gt;CategorizesCampagins&lt;/code&gt; or &lt;code&gt;FiltersBusinesses&lt;/code&gt;, which makes debugging them very, very easy and pleasant. I don&amp;rsquo;t need to scroll the hell out of my screen to understand how an isolated piece of functionality works.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Rails is just a framework to make your app work on the web, don&amp;rsquo;t mix your logic with rails-y stuff. Your app domain should be defined anywhere besides Rails views, controllers, and models.&lt;/p&gt;

&lt;h1&gt;Inspiration&lt;/h1&gt;

&lt;p&gt;First, and most influential person for me is &lt;a href=&quot;https://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; and his screencast series &lt;a href=&quot;https://www.destroyallsoftware.com/screencasts&quot;&gt;destroyallsoftware&lt;/a&gt;. If you want to learn isolated testing &amp;ndash; watch this guy, he is amazing. (He even test-drives bash scripts :D)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.codeclimate.com/blog/2012/11/28/your-objects-the-unix-way/&quot;&gt;Your objects the UNIX way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, my approach was influenced by &lt;a href=&quot;http://www.youtube.com/watch?v=CGN4RFkhH2M&quot;&gt;Hexagonal Rails&lt;/a&gt; concept.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Make it static</title>
   <link href="http://alisnic.github.com/posts/static"/>
   <updated>2012-12-14T00:00:00+02:00</updated>
   <id>http://alisnic.github.com/posts/static</id>
   <content type="html">&lt;p&gt;Finally, I made a static blog which actually works.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://zachholman.com/&quot;&gt;Zach Holman&lt;/a&gt; for &lt;a href=&quot;http://zachholman.com/posts/left/&quot;&gt;open sourcing his previous Jekyll blog&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
